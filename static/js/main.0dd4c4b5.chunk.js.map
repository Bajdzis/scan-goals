{"version":3,"sources":["store/actions/goals/action.ts","layouts/HomePage/HomePage.tsx","App.tsx","serviceWorker.ts","store/reducers/goals/goalsReducer.ts","store/reducers/tips/tipsReducer.ts","store/root.ts","index.tsx"],"names":["createNewGoals","actionCreatorFactory","actionCreator","HomePage","dispatch","useDispatch","type","onClick","App","Boolean","window","location","hostname","match","goalsReducer","reducerWithInitialState","case","state","name","tipsReducer","rootReducer","combineReducers","goals","tips","initialState","JSON","parse","localStorage","getItem","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","setItem","stringify","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAIaA,E,MAFSC,GAAqB,QAEbC,CAAsB,cCCvCC,EAAqB,WAC9B,IAAMC,EAAWC,cACjB,OACI,6BACI,kDACA,4BAAQC,KAAK,SAASC,QAAS,WAC3BH,EAASJ,EAAe,WAD5B,iBAGA,4BAAQM,KAAK,UAAb,qBACA,4BAAQA,KAAK,UAAb,wBCLGE,EANO,WACpB,OACE,kBAAC,EAAD,OCOgBC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2D,0BCTKC,EAAeC,kCAAoC,IAC3DC,KAAKhB,GAAgB,SAACiB,EAAOC,GAAR,4BAAqBD,GAArB,CAA4B,CAAEC,aCJ3CC,EAAcJ,kCAAmC,ICIxDK,EAAcC,YAAgB,CAACC,MAAOR,EAAcS,KAAMJ,IAE1DK,EAA0BC,KAAKC,MAAMhB,OAAOiB,aAAaC,QAAQ,UAAY,MAGtEC,EAAQC,YAAiDV,EAAaI,EAAcd,OAAOqB,8BAAgCrB,OAAOqB,gCAE/IF,EAAMG,WAAU,WACZ,IAAMf,EAAQY,EAAMI,WACpBvB,OAAOiB,aAAaO,QAAQ,QAAST,KAAKU,UAAUlB,OCXxDmB,IAASC,OAAO,kBAAC,IAAD,CAAUR,MAAOA,GAAO,kBAAC,EAAD,OAAoBS,SAASC,eAAe,SJiI5E,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GAC/BA,EAAaC,kB","file":"static/js/main.0dd4c4b5.chunk.js","sourcesContent":["import actionCreatorFactory from 'typescript-fsa';\r\n \r\nconst actionCreator = actionCreatorFactory('GOALS');\r\n\r\nexport const createNewGoals = actionCreator<string>('CREATE_NEW');\r\n\r\n","import React from 'react';\r\nimport './HomePage.scss';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createNewGoals } from '../../store/actions/goals/action';\r\n\r\nexport const HomePage: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    return (\r\n        <div>\r\n            <div>Cytat motywacyjny</div>\r\n            <button type=\"button\" onClick={() => {\r\n                dispatch(createNewGoals(\"test\"));\r\n            }}>Zaplanuj cele</button>\r\n            <button type=\"button\">Rozwijaj siÄ™</button>\r\n            <button type=\"button\">Zmotywuj znajomych</button>\r\n        </div>\r\n\r\n    );\r\n}\r\n","import React from 'react';\nimport { HomePage } from './layouts/HomePage/HomePage';\n\nconst App: React.FC = () => {\n  return (\n    <HomePage />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\r\nimport { createNewGoals } from '../../actions/goals/action';\r\n\r\nexport interface Goal {\r\n    name: string;\r\n}\r\n\r\nexport type GoalsState = Goal[];\r\n\r\nexport const goalsReducer = reducerWithInitialState<GoalsState>([])\r\n    .case(createNewGoals, (state, name) => [...state, { name }]);\r\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\r\n\r\nexport interface TipsState {\r\n\r\n}\r\n\r\nexport const tipsReducer = reducerWithInitialState<TipsState>({});\r\n","\r\nimport { combineReducers, createStore, Action } from 'redux';\r\nimport { goalsReducer, GoalsState } from './reducers/goals/goalsReducer';\r\nimport { tipsReducer, TipsState } from './reducers/tips/tipsReducer';\r\n\r\ninterface RootState {\r\n    goals: GoalsState,\r\n    tips: TipsState\r\n}\r\n\r\nconst rootReducer = combineReducers({goals: goalsReducer, tips: tipsReducer});\r\n\r\nconst initialState: RootState = JSON.parse(window.localStorage.getItem('state') || '{}') as RootState;\r\n\r\n// @ts-ignore\r\nexport const store = createStore<RootState, Action, unknown, unknown>(rootReducer, initialState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nstore.subscribe(() => {\r\n    const state = store.getState();\r\n    window.localStorage.setItem('state', JSON.stringify(state));\r\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/root';\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}