{"version":3,"sources":["store/actions/page/action.ts","hooks/usePageRoute.ts","store/actions/learn/action.ts","store/reducers/learn/learnReducer.ts","store/actions/toastr/action.ts","components/StickyScroll/StickyScroll.tsx","layouts/LearnPage/components/NewTip/NewTip.tsx","hooks/useLearnStats.ts","store/reducers/todayRead/todayReadReducer.ts","store/selector/todayRead/selector.ts","hooks/useQuote.ts","components/Quote/Quote.tsx","hooks/useShare.ts","hooks/useSaveState.ts","components/StickyItem/StickyItem.tsx","layouts/ReadMePage/ReadMePage.tsx","components/Header/Header.tsx","components/GoalList/GoalList.tsx","store/actions/goals/action.ts","hooks/useGoalCreator.ts","store/reducers/goals/goalsReducer.ts","layouts/GoalPage/components/EditGoal/EditGoal.tsx","App.tsx","layouts/HomePage/HomePage.tsx","layouts/LearnPage/LearnPage.tsx","layouts/WelcomePage/WelcomePage.tsx","layouts/GoalPage/GoalPage.tsx","layouts/AssignTipPage/AssignTipPage.tsx","serviceWorker.ts","store/reducers/tips/tipsReducer.ts","store/reducers/page/pageReducer.ts","store/reducers/goalFields/goalFieldsReducer.ts","store/reducers/toastr/toastrReducer.ts","store/root.ts","index.tsx","components/Toastr/Toastr.tsx"],"names":["goToPage","actionCreatorFactory","actionCreator","usePageRoute","page","dispatch","useDispatch","name","props","readTip","learnReducer","reducerWithInitialState","mind","goodTips","badTips","time","fit","case","state","payload","groupName","feedback","id","LEARN_TIP","title","description","unlockFields","getTip","LEARN_TIP_GROUP","addToastr","deleteToastr","StickyScroll","children","className","countReadTips","group","learn","length","NewTip","onRead","count","useSelector","tip","onClick","fields","type","message","tipId","map","text","index","key","dangerouslySetInnerHTML","__html","useLearnStats","mindCount","timeCount","fitCount","allTipsCount","readTipsCount","getToday","today","Date","getDay","getMonth","getFullYear","todayReadReducer","read","isRead","currentToday","todayRead","window","location","hash","QUOTES","value","author","Quote","quote","isReadToday","useQuote","shareMgs","url","useShare","navigator","share","canShare","useSaveState","filename","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","download","JSON","stringify","StickyItem","top","bottom","ReadMePage","close","height","gridTemplateRows","Header","onClickBack","GoalList","goalArray","goals","goal","createNewGoals","editGoals","deleteGoal","assignTipToGoals","useGoalCreator","prompt","GOAL_FIELDS","goalsReducer","tipsId","newState","push","filter","EditGoal","goalIndex","onStopEdit","goalFields","action","onSubmit","e","preventDefault","form","target","Array","from","elements","reduce","includes","defaultValue","why","specific","measure","achievable","exciting","events","margin","confirm","background","width","color","PAGE_NAME_TO_COMPONENT","home","goToLearn","goToGoal","countGoal","saveState","useState","localStorage","getItem","showReadMe","setShowReadMe","setItem","gap","gridTemplateColumns","viewBox","fill","d","disabled","lineHeight","marginTop","fontWeight","fontFamily","role","href","rel","goToHome","setPage","welcome","createGoal","aria-label","alert","editIndex","setEditIndex","assignTip","selectedIndex","setSelectedIndex","onChange","toggleSelectByIndex","checked","forEach","Boolean","hostname","match","tipsReducer","pageReducer","goalFieldsReducer","toastrReducer","messages","incrementId","rootReducer","combineReducers","tips","toastr","initialState","parse","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","ReactDOM","render","Suspense","fallback","pageName","pageProps","Component","hideId","setHideId","renderId","setRenderId","bemName","indexOf","setTimeout","bemMod","onTransitionEnd","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ba675cc.chunk.js","sourcesContent":["import actionCreatorFactory from 'typescript-fsa';\nimport { PageState } from '../../reducers/page/pageReducer';\n \nconst actionCreator = actionCreatorFactory('PAGE');\n\nexport const goToPage = actionCreator<PageState>('GO_TO_PAGE');\n","import { useDispatch } from 'react-redux';\nimport { PageName } from '../store/reducers/page/pageReducer';\nimport { goToPage } from '../store/actions/page/action';\n\nexport function usePageRoute(page: PageName){\n    const dispatch = useDispatch();\n\n    return () => {\n        dispatch(goToPage({\n            name: page,\n            props: {}\n        }));\n    };\n}\n","import actionCreatorFactory from 'typescript-fsa';\nimport { LearnGroupNames } from '../../reducers/learn/learnReducer';\n \nconst actionCreator = actionCreatorFactory('LEARN');\n\ninterface ReadTipParams {\n    id: string;\n    groupName: LearnGroupNames;\n    feedback: 'good'|'bad';\n}\n\nexport const readTip = actionCreator<ReadTipParams>('READ_TIP');\n\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { readTip } from '../../actions/learn/action';\n\nexport interface LearnGroup {\n    goodTips: string[];\n    badTips: string[];\n}\n\nexport interface LearnState {\n    mind: LearnGroup;\n    time: LearnGroup;\n    fit: LearnGroup;\n}\n\nexport type LearnGroupNames = keyof LearnState;\n\nconst INITIAL_STATE: LearnState = {\n    mind: { goodTips: [], badTips:[]},\n    time: { goodTips: [], badTips:[]},\n    fit: { goodTips: [], badTips:[]},\n};\n\nexport const learnReducer = reducerWithInitialState<LearnState>(INITIAL_STATE)\n    .case(readTip, (state, payload) => {\n        return {\n            ...state,\n            [payload.groupName]: {\n                goodTips: [...state[payload.groupName].goodTips, ...(payload.feedback === 'good' ? [payload.id] : [])],\n                badTips: [...state[payload.groupName].badTips, ...(payload.feedback === 'bad' ? [payload.id] : [])]\n            }\n        };\n    });\n\n\nexport interface LearnTip {\n    id: string;\n    title: string;\n    description: string[];\n    unlockFields: string[];\n}\n\nconst LEARN_TIP: {[key: string]: Omit<LearnTip, 'id'>} = {\n    'mind-1' : {\n        title: 'Zerwij z rozmyślaniem',\n        description: [\n            'Często wyobrażamy sobie jak może potoczyć się przyszłość. Jednak często jest to źródło naszego niezadowolenia z obecnego stanu. Gdy nastawimy się na jedno konkretne wydarzenie czujemy się rozczarowani gdy coś pójdzie nie po naszej myśli. Staraj się działać DZIŚ aby wpłynąć na JUTRO. Myślenie o dniu jutrzejszym nie przybliży nas do celu.',\n            'Przeszłość jest ważna jednak musisz pamiętać, że jej nie zmienisz. Działać możesz tylko DZIŚ. Analizuj co zrobiłeś źle. Pamiętaj, że dzięki popełnianym błędom stajesz się mądrzejszy i skuteczniejszy. ', \n            'Jest tylko tu i teraz. Skończ z myśleniem o przeszłości i przyszłosci.'\n        ],\n        unlockFields: []\n    },\n    'mind-2' : {\n        title: 'Opisz dokładnie co chcesz osiągnąć',\n        description: [\n            'Nasze plany trudno nam zrealizować gdy nie wiemy co tak naprawdę chcemy osiągnąć. Nasz cel powinien być najlepiej jak to możliwe sprecyzowany. Przykładami mało sprecyzowanych celów mogą być plany: “chcę schudnąć”, “chcę czytać więcej książek”. Obydwa przykłady nic nam nie mówią ponieważ są mało precyzyjne. Powinniśmy starać się wyznaczyć cel w taki sposób aby wiedzieć kiedy osiągniemy cel.',\n            'Prawidłowo sprecyzowane cele powinny brzmieć : “chcę schudnąć 5 kg”, “chcę przeczytać 3 książki każdego miesiąca”.', \n            'Staraj nie skupiać się nad sposobem realizacji celu. Jedyne co powinieneś teraz określić to gdzie chcesz być, a nie jak tam dojść.'\n        ],\n        unlockFields: ['specific']\n    },\n    'mind-3' : {\n        title: 'Rozłóż plan na części',\n        description: [\n            'Duży skomplikowany cel może nas przerosnąć. Gdy będziemy patrzeć jak dużo nam brakuje do jego realizacji możemy czuć, że nie damy rady. Przez to odległe cele mogą być trudne w realizacji, a ich realizacja często odwlekana. Aby sobie pomóc warto wyznaczyć kilka mniejszych celów.',\n            'Załóżmy, że chcemy schudnąć 10 kg. Warto aby pierwsza część celu była łatwa do osiągnięcia. Dlatego też możemy zacząć od 1 kg, następnie spróbować zawalczyć o 3 kg, a na samym końcu zacząć realizować cel 10 kg. Dzięki temu nasz cel jest podzielony na 3 mniejsze fragmenty i możemy się skupić tylko na najbliższym aspekcie.'\n        ],\n        unlockFields: ['achievable']\n    },\n    'mind-4' : {\n        title: 'Odpoczynek i nagrody też są ważne!',\n        description: [\n            'Aby utrzymać motywację stosuj nagrody. Nagrody należą Ci się za realizację celów oraz za mniejsze części na które podzieliłeś cel w poprzedniej wskazówce. Pamiętaj aby nagroda nie była sprzeczna z jakimkolwiek innym celem. Wpisz do każdego celu jak możesz sobie uprzyjemnić dzień gdy osiągniesz określony stopień postępu prac. '\n        ],\n        unlockFields: ['exciting']\n    },\n    'mind-5' : {\n        title: 'Określ plan w czasie',\n        description: [\n            'Określ jak długo może Ci zająć zrealizowanie celu. Jeśli nie jesteś w stanie tego określić być może warto w pierwszej kolejności zrealizować tylko część celu. Możesz podzielić go na kilka mniejszych części, a następnie zrezygnować z wykonywania niektórych z nich. Warto abyś był w stanie mniej więcej określić ile może zająć jego realizacja.'\n        ],\n        unlockFields: ['time']\n    },\n    'mind-6' : {\n        title: 'Plan B',\n        description: [\n            'Nie zawsze mamy siłę na realizację danego zadania. Wówczas warto wykonać inne zadanie jeśli to przybliży nas do wykonania celu. Jednym z takich zadań jest używanie naszej aplikacji lecz sposobów jest dużo więcej!',\n            'Gdy nie mamy siły na realizację zadań możemy obejrzeć inspirujący film o tematyce związanej z naszymi postanowieniami, przeczytać książkę lub przeglądać posty na facebook z wartościowych grup związanych z naszą branżą.',\n            'Wypisz wszystkie alternatywne czynności które możesz wykonywać aby przybliżyć się do realizacji celu!'\n        ],\n        unlockFields: ['events']\n    },\n    'mind-7' : {\n        title: 'Przypominajki',\n        description: [\n            'Często przypominaj sobie o swoich celach. Powinieneś otoczyć się materiałami i przypominajkami które pomogą Ci skupić się na określonym celu. Gdzie i w jaki sposób powinieneś umieszczać przypomnienia? Nie ma ograniczeń!',\n            'Możesz ustawić hasło do komputera (np. “schudne20kg!”) oraz ustawić nową tapetę. Warto też wydrukować sobie cały nasz cel i powiesić sobie go w widocznym miejscu. Możesz powiesić go na lodówce lub obok łóżka. Dobrym miejscem jest również  lustro w łazience. Codziennie podczas mycia zębów będziemy mogli go przeczytać.'\n        ],\n        unlockFields: []\n    },\n    'time-1': {\n        title: 'Skup się!',\n        description: [\n            'Często jesteśmy zalatani i wszystko robimy równocześnie. W naszym otoczeniu posiadamy też mnóstwo rozpraszaczy i często nad nimi nie panujemy. Warto wyrobić sobie nawyk pracy w skupieniu i zawalczyć o mniejszą ilość rozpraszających elementów w ciągu naszego dnia.',\n            'W pierwszej kolejności powinniśmy się zająć powiadomieniami które dostajemy na naszym telefonie. Bardzo często powiadomienia nas zasypują i rozpraszają gdy tego nie potrzebujemy. W ustawieniach systemu android możesz w wygodny sposób  zmienić ustawienia powiadomień dla każdej aplikacji.',\n            'Gdy mamy już z głowy powiadomienia warto zająć się adresem e-mail. Zacznijmy od SPAMu jest to problem który nas niepotrzebnie angażuje dlatego warto założyć swoja skrzynke pocztową w firmach które nie świadczą usług wysyłania reklam poprzez e-mail. Jeśli spam dotyczy nas w małym stopniu być może warto wypisać się z niektórych newsletterów?',\n            'Ostatnim punktem który zalecamy zrobić jest skonfigurowanie powiadomień na facebooku. Facebook wysyła nam bardzo duża ilość powiadomień które nie zawsze nas interesują. Warto je ograniczyć aby nie zajmowały nam niepotrzebnie czasu.'\n        ],\n        unlockFields: []\n    },\n    'time-2' : {\n        title: 'Ogranicz dostęp do facebook oraz innych mediów',\n        description: [\n            'Mozliwość praktycznie nieskończonego przewijania głównej strony na facebook czy instagramie zabiera nam bardzo dużo czasu! Warto ustalić sobie limit czasowy na przeglądanie niekończących się treści.',\n            'Jeśli posiadasz telefon z systemem android w ustawieniach powinieneś znaleźć zakładkę “Cyfrowa równowaga” Możesz tam zweryfikować ile czasu poświęcasz na każda z zainstalowanych aplikacji. Możesz również ustawić tak zwany minutnik który będzie pilnował Cię aby zmniejszyć ilość poświecanego czasu na konkretne aplikacji'\n        ],\n        unlockFields: []\n    },\n    'time-3': {\n        title: 'E-mail to poczta!',\n        description: [\n            'Jeśli ktoś wysyła Ci e-mail nie oczekuje natychmiastowej odpowiedzi. W przeciwnym razie zawdzonił by do Ciebie lub napisał na czacie (facebook, slack, itd)',\n            'Często tracimy czas na bez sensowne odświezanie naszej poczty sprawdzając bardzo często czy nie dostaliśmy odpowiedzi w ważnej dla nas sprawie.',\n            'Zrób sobie wolne! W zależności od ilosci poczty którą dostajesz sprawdzaj i odpisuj na wszystkie e-maila codzienie lub co dwa dni.'\n        ],\n        unlockFields: []\n    },\n    'time-4' : {\n        title: 'Sztuka priorytetów',\n        description: [\n            'Może szkoda czasu na jakiś cel? Czasem nie można zrobić wszystkiego na raz! Jeśli tego potrzebujesz od dziś w edycji celu bedzie widniał przycisk usuń.',\n            'Pamietaj jednak aby nie rezygnować z celów które są dla nas ważne! Przycisk powinien być używany tylko jeśli zyskamy dzięki temu czas na realizacje ważniejszych celów!'\n        ],\n        unlockFields: ['delete']\n    },\n    'time-5' : {\n        title: 'Odpocznij od ciągłego myślenia',\n        description: [\n            'Często poświęcamy czas na powtarzanie sobie w myślach ważnych informacji lub zadań które mamy zrealizować. Zawsze mówimy sobie, że przecież wszystko zapamiętamy. Jednak nie zawsze wychodzi to po naszej myśli.',\n            'Warto zastosować triki metody GTD (getting things done). Jeżeli masz jakiś pomysł/ myśl którą musisz zapamiętać wyciągnij telefon i ja zapisz. Dzięki temu będziesz mógł o niej zapomnieć. Jeśli będziesz zapisywał wszystkie zadania poczujesz się bardziej zrelaksowany oraz nie będziesz tracił czasu na zadawanie pytań takich jak : “Czy na pewno pamiętałem o wszystkim?”, “Coś ja miałem zrobić?”.'\n        ],\n        unlockFields: []\n    },\n    'fit-1': {\n        title: 'Rusz się!',\n        description:[\n            'Często popełniamy błąd i od nowego roku wybieramy się na siłownie. Często nieświadomie robimy sobie krzywde zaczynająć nasz trening bez przygotowania. Dlatego warto uświadomić sobie, że nie trzeba chodzić na siłownie aby pozbyć się zbędnych kilogramów. Wystarczą nam inne formy aktywności dopasowane do nas samych.',\n            'Jak wpleść wykonywanie drobnych aktywności w nasz dzień? Jest wiele sposobów które pomogą nam przygotować się na cięższe ćwiczenia. Najprostrzym sposobem jest zmiana środku transportu. Nie musimy wszędzie jeździć autem. Wybierając spacer lub rower unikniemy korków. Jeśli masz naprawdę długą drogę do pracy możesz starać się parkować dalej od pracy aby przejść się kawałek :)',\n            'Kolejną aktywnością są czynności domowe. Możesz zabrać się za gruntowne porządki w domu które zapewnią sporo aktywności. Również przygotowywanie własnych posiłków możemy zaliczyć do tak zwanych spontanicznych aktywności w ciągu dnia (NEAT). ',\n            'Jak widzisz możliwości jest sporo. Sam pewnie znajdziesz kolejne sposoby zapewnienia sobie większej aktywności w ciągu dnia. Postaraj się już dziś dodać taką aktywność do swojego planu dnia. ',\n            'Powodzenia !'\n        ],\n        unlockFields: []\n    },\n    'fit-2': {\n        title: 'Eksperymentuj!',\n        description: [\n            'Często słyszymy o efekcie jojo oraz o dietach cud. Jeśli ktoś osiągnął super sylwetkę często pytamy jaką dietę stosował. Jednak każdy z nas powinien taką dietę stworzyć pod siebie!',\n            'Nie jest to trudne! Zacznijmy od tego jak długo powinniśmy być na diecie? Biorąc pod uwage fakt, że nie jesteśmy zadowoleni z swojej sylwetki powinniśmy porzucić nasz sposób odżywiania raz na zawsze! Jednak często wystarczą drobne zmiany aby nasza dieta nie dodawała nam kilogramów które zrzucimy.',\n            'Każda dieta odchudzająca działa na takiej samej zasadzie. Musimy jeść mniej kalorii niż potrzebujemy. Dlatego schudnąć możemy na każdej diecie nawet jedząc czekoladę w jej trakcie. Jednak warto ograniczyć słodycze oraz tłuste potrawy w trakcie diety odchudzającej. Dzięki temu będziemy jeść dużo większe posiłki zachowując tą samą liczbę kalorii. Dlatego też nie będziemy głodni.',\n            'Znajdź w sklepie google play “<a href=\"https://play.google.com/store/apps/details?id=pl.scan.food.twa\" target=\"_blank\">Kalkulator kalorii scanfood</a>” i zacznij zapisywać swoją obecną dietę w kalkulatorze. Nie musisz od razu przechodzić na dietę odchudzającą. Warto policzyć ile kalorii zapewnia nam nasza obecna dieta i na bieżąco wprowadzać zmiany.'\n        ],\n        unlockFields: []\n    },\n    'fit-3': {\n        title: 'Rób pomiary!',\n        description: [\n            'Jeśli poprawnie określisz sposób mierzenia postępów masz większe szanse na zrealizowanie celu. Gdy idzie nam dobrze i widzimy efekty łatwiej nam utrzymać motywację. Gdy efektów brak możemy szybko skorygować nasze działania.',\n            'W przypadku diety najlepiej sprawdza się średnia waga z całego tygodnia oraz zdjęcia naszej sylwetki. Obie metryki są dostępne za darmo w <a href=\"https://play.google.com/store/apps/details?id=pl.scan.food.twa\" target=\"_blank\">kalkulatorze kalorii scan food</a>. Podczas robienia zdjęć porównujących naszą sylwetkę scan-food pokaże Ci jak się ustawić w podobnej pozycji do poprzedniego zdjęcia.',\n            'W przypadku innych celów naszymi metrykami może być liczba zdobytych klientów, ilość przeczytanych książek lub cokolwiek innego możliwego do zmierzenia. Zapisz w każdym swoim celu w jaki sposób możesz mierzyć postęp jego realizacji'\n        ],\n        unlockFields: ['measure']\n    },\n    'fit-4': {\n        title: 'Zadbaj o jakość snu!',\n        description: [\n            'Nie wysypiasz się? To nie dobrze! Gdy jesteśmy zaspani jesteśmy mniej efektywni i trudniej nam realizować spontaniczną aktywność w ciągu dnia! Do tego nie zapewniamy sobie odpowiedniej regeneracji naszego organizmu. Jakość snu może wpływać na nasze efekty utrzymania wagi. Zwracaj uwagę co poprawia Twoją jakość snu, a co mu przeszkadza.',\n            'Warto zacząć od określenia stałej pory kładzenia się spać oraz budzenia się. Wyrobienie sobie takiego nawyku jest proste i pozwoli nam łatwiej określać kiedy powinniśmy iść spać. Warto też zadbać o zmniejszoną emisję światła niebieskiego z ekranów naszych urządzeń. Znajdź ustawienia w swoim telefonie które zmienią barwy Twojego wyświetlacza przed pójściem spać.',\n            'Jeśli posiadasz sportowe smart zegarki możesz mierzyć swój sen. Kontroluj i sprawdzaj co na Ciebie działa. Często mogą pomóc odpowiednie zasłony które od izolują nas od świateł ulicznych czy wschodu słońca.'\n        ],\n        unlockFields: []\n    }\n};\n\nexport function getTip(id: string): LearnTip {\n    if(LEARN_TIP[id]){\n        return { ...LEARN_TIP[id] , id};\n    }\n    return {\n        id: 'unknown',\n        description: [],\n        title: '',\n        unlockFields: []\n    };\n}\n\nexport const LEARN_TIP_GROUP: {[key in LearnGroupNames]: LearnTip[]} = {\n    mind: [\n        getTip('mind-1'),\n        getTip('mind-2'),\n        getTip('mind-3'),\n        getTip('mind-4'),\n        getTip('mind-5'),\n        getTip('mind-6'),\n        getTip('mind-7'),\n    ],\n    time:[\n        getTip('time-1'),\n        getTip('time-2'),\n        getTip('time-3'),\n        getTip('time-4'),\n        getTip('time-5')\n    ],\n    fit: [\n        getTip('fit-1'),\n        getTip('fit-2'),\n        getTip('fit-3'),\n        getTip('fit-4'),\n    ]\n};\n","import actionCreatorFactory from 'typescript-fsa';\n \nconst actionCreator = actionCreatorFactory('TOASTR');\n\nexport const addToastr = actionCreator<{ type: 'success'|'error'|'warning'|'info', message: string, time?: number}>('ADD_TOASTR');\nexport const deleteToastr = actionCreator<number>('DELETE_TOASTR');\n\n\n","import React from 'react';\nimport './StickyScroll.scss';\n\ninterface StickyScrollProps {\n    children: React.ReactNode;\n}\n\nexport const StickyScroll: React.FC<StickyScrollProps> = ({children}: StickyScrollProps) => {\n  \n\n    return (<div className=\"stickyScroll\">\n        {children}\n    </div>);\n};\n","import React from 'react';\nimport './NewTip.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LearnGroupNames, LEARN_TIP_GROUP } from '../../../../store/reducers/learn/learnReducer';\nimport { RootState } from '../../../../store/root';\nimport { readTip } from '../../../../store/actions/learn/action';\nimport { goToPage } from '../../../../store/actions/page/action';\nimport { addToastr } from '../../../../store/actions/toastr/action';\nimport { StickyScroll } from '../../../../components/StickyScroll/StickyScroll';\n\ninterface NewTipProps {\n    groupName: LearnGroupNames;\n    onRead(): void;\n}\n\nconst getMessageAboutField = (fields: string[]) => {\n    if (fields[0] === 'delete') {\n        return 'Gratulacje! Odblokowałeś możliwość usuwania celów. Zastanów się z których celów powinieneś zrezygnować aby zyskać więcej czasu!';\n    }\n    return 'Gratulacje! Odblokowałeś nowe pole do uzupelnienia w zakładce cele. Uzupełnij je najszybciej jak to mozliwe!'; \n};\n\nexport const countReadTips = (groupName: LearnGroupNames) => (state: RootState) => {\n    const group = state.learn[groupName];\n    return group.badTips.length + group.goodTips.length;\n};\n\nexport const NewTip: React.FC<NewTipProps> = ({ groupName, onRead }: NewTipProps) => {\n    const dispatch = useDispatch();\n    const count = useSelector(countReadTips(groupName));\n    const tip = LEARN_TIP_GROUP[groupName][count] || null;\n    if(tip === null){\n        return null;\n    }\n    const onClick = (feedback: 'good'| 'bad') => {\n        onRead();\n        dispatch(readTip({\n            feedback,\n            groupName,\n            id: tip.id\n        }));\n        tip.unlockFields.length && dispatch(addToastr({\n            type: 'success',\n            message: getMessageAboutField(tip.unlockFields)\n        }));\n        feedback === 'good' && dispatch(goToPage({\n            name:'assignTip',\n            props: {\n                tipId: tip.id\n            }\n        }));\n    };\n    return (\n        <div className=\"newTip\">\n            <h1>{tip.title}</h1>\n            <StickyScroll>\n                {tip.description.map((text, index) => <p key={index} dangerouslySetInnerHTML={{\n                    __html : text\n                }}/>)}\n                <h3>Czy porada przyda Ci się do realizacji któregoś z celów?</h3>\n                <div className=\"newTip__buttons\">\n                    <button className=\"good\" onClick={() => onClick('good')}>Tak</button>\n                    <button className=\"bad\" onClick={() => onClick('bad')}>Nie</button>\n                </div>\n            </StickyScroll>\n        </div>\n    );\n};\n","import { LEARN_TIP_GROUP } from '../store/reducers/learn/learnReducer';\nimport { useSelector } from 'react-redux';\nimport { countReadTips } from '../layouts/LearnPage/components/NewTip/NewTip';\n\nexport function useLearnStats(){\n    const mindCount = useSelector(countReadTips('mind'));\n    const timeCount = useSelector(countReadTips('time'));\n    const fitCount = useSelector(countReadTips('fit'));\n\n    const allTipsCount = LEARN_TIP_GROUP.mind.length + LEARN_TIP_GROUP.time.length + LEARN_TIP_GROUP.fit.length;\n\n    return {\n        allTipsCount,\n        readTipsCount: mindCount + timeCount + fitCount\n    };\n}\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { readTip } from '../../actions/learn/action';\n\nexport interface TodayReadState {\n    today: string;\n    read: boolean;\n};\n\nconst INITIAL_STATE: TodayReadState = {\n    today: '-',\n    read: false\n};\n\nexport const getToday = () => {\n    const today = new Date();\n    return `${today.getDay()}-${today.getMonth()}-${today.getFullYear()}`;\n}\n\nexport const todayReadReducer = reducerWithInitialState<TodayReadState>(INITIAL_STATE)\n    .case(readTip, () => ({today: getToday(), read: true}));\n\n","import { RootState } from '../../root';\nimport { getToday } from '../../reducers/todayRead/todayReadReducer';\n\nexport const isRead = (state: RootState) => {\n    const currentToday = getToday();\n    const {read, today} = state.todayRead;\n\n    if (window.location.hash === '#unlock') {\n        return false;\n    }\n\n    return today === currentToday && read;\n}\n","import { useLearnStats } from './useLearnStats';\nimport { isRead } from '../store/selector/todayRead/selector';\nimport { useSelector } from 'react-redux';\n\ninterface Quote {\n    value: string;\n    author: string;\n}\n\nexport function useQuote() {\n    const {readTipsCount} = useLearnStats();\n    const isReadToday = useSelector(isRead);\n    return QUOTES[readTipsCount - (isReadToday ? 1 : 0)] || QUOTES[0];\n}\n\nconst QUOTES: Quote[] = [\n    {\n        value: 'Sukces jest sumą małych wysiłków, powtarzanych dzień po dniu.',\n        author: 'Robert Collier'\n    },\n    {\n        value: 'Nie próbuj, rób albo nie rób, nie ma próbowania',\n        author: 'Mistrz Yoda'\n    },\n    {\n        value: 'Jeżeli chcesz uniknąć krytyki: nic nie mów, nic nie rób, bądź nikim.',\n        author: 'Arystoteles'\n    },\n    {\n        value: 'W życiu nie chodzi o to, by siebie odnaleźć. W życiu chodzi o to, aby siebie stworzyć!',\n        author: 'George Bernard Shaw'\n    },\n    {\n        value: 'Nic nie jest szczególnie trudne, jeżeli podzielisz to na małe zadania.',\n        author: 'Henry Ford'\n    },\n    {\n        value: 'Nie ma znaczenia jak wolno idziesz, tak długo jak nie przestajesz.',\n        author: 'Konfucjusz'\n    },\n    {\n        value: 'Nigdy nie rezygnuj z marzenia, tylko dlatego, że zrealizowanie go wymaga czasu. Czas i tak upłynie.',\n        author: 'Earl Nightingale'\n    },\n    {\n        value: 'Aby zer­wać z na­wykiem, wyrób so­bie in­ny, który go wymaże.',\n        author: 'Mark Twain'\n    },\n    {\n        value: 'Twój czas jest ograniczony, więc nie marnuj go na byciem kimś, kim nie jesteś.',\n        author: 'Steve Jobs'\n    },\n    {\n        value: 'Pudłujesz 100% strzałów, jeśli w ogóle ich nie wykonujesz.',\n        author: 'Wayne Gretzky'\n    },\n    {\n        value: 'Nie ma nic złego w świętowaniu sukcesu, ale ważniejsze jest wyciągnięcie nauki z porażki.',\n        author: 'Bill Gates'\n    },\n    {\n        value: 'Nie znam klucza do sukcesu, ale kluczem do porażki jest próbować zadowolić wszystkich.',\n        author: 'Bill Cosby'\n    },\n    {\n        value: 'Jeśli chcesz gdzieś dojść, najlepiej znajdź kogoś, kto już tam doszedł.',\n        author: 'Robert Kiyosaki '\n    },\n    {\n        value: 'Najtrudniejsze jest zdecydowanie się na działanie. Reszta to już tylko kwestia wytrwałości.',\n        author: 'Amelia Earhart'\n    },\n    {\n        value: 'Kiedyś – nie ma takiego dnia tygodnia.',\n        author: 'Janet Dailey'\n    },\n    {\n        value: 'Możesz zrobić wszystko, co chcesz jeśli tylko trzymasz się tego celu wystarczająco długo.',\n        author: 'Helen Keller'\n    }\n];\n","import React from 'react';\nimport './Quote.scss';\nimport { useQuote } from '../../hooks/useQuote';\n\nexport const Quote: React.FC = () => {\n    const quote = useQuote();\n\n    return (<div className=\"quote\">\n        <small className=\"quote__label\">\n            Cytat na dziś:\n        </small>\n        <div className=\"quote__value\">\n            {quote.value}\n        </div>\n        <div className=\"quote__author\">\n            {quote.author}\n        </div>\n    </div>);\n};\n","const shareMgs = {\n    title: 'W tym roku dam rade!', \n    text: 'W tym roku realizuje swoje postanowienia z aplikacją \"Mój Everest\"!',\n    url: 'https://play.google.com/store/apps/details?id=pl.scan.food.twa'\n};\n\nfunction canShare(): boolean {\n    // @ts-ignore\n    if (!navigator.share) {\n        return false;\n    }\n\n    // @ts-ignore\n    if (!navigator.canShare) {\n        return false;\n    }\n\n    // @ts-ignore\n    if (!navigator.canShare(shareMgs)) {\n        return false;\n    }\n\n    return true;\n}\n\ntype ShareFunction = () => void;\n\nexport function useShare(): ShareFunction | undefined {\n    if (canShare()) {\n        // @ts-ignore\n        return () => navigator.share(shareMgs);\n    }\n\n    return;\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../store/root';\nimport { addToastr } from '../store/actions/toastr/action';\n\nfunction download(filename: string, text: string) {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n  \n    element.style.display = 'none';\n    document.body.appendChild(element);\n  \n    element.click();\n  \n    document.body.removeChild(element);\n}\n\nexport function useSaveState() {\n    const dispatch = useDispatch();\n    const state = useSelector((state: RootState) => state);\n\n    return () => {\n        download('moj-everest.state-dump.json', JSON.stringify(state, null, 4));\n        dispatch(addToastr({\n            type: 'success',\n            message: 'Plik został poprawnie wygenerowany.',\n            time: 2000\n        }));\n    };\n}\n","import React from 'react';\nimport './StickyItem.scss';\n\ninterface StickyItemProps {\n    children: React.ReactNode;\n    top?: number;\n    bottom?: number;\n}\n\nexport const StickyItem: React.FC<StickyItemProps> = ({children, top, bottom}: StickyItemProps) => {\n\n    return (<div className=\"stickyItem\" style={{top, bottom}}>\n        {children}\n    </div>);\n};\n","import React from 'react';\n\nimport { StickyScroll } from '../../components/StickyScroll/StickyScroll';\nimport './ReadMePage.scss';\nimport { StickyItem } from '../../components/StickyItem/StickyItem';\n\ninterface ReadMePageProps {\n    close(): void;\n}\n\nexport const ReadMePage: React.FC<ReadMePageProps> = ({ close }: ReadMePageProps) => {\n\n    return (\n        <div style={\n            {\n                display: 'grid',\n                height: '100%',\n                gridTemplateRows: 'auto 1fr'\n            }\n        }>\n            <div>\n                <h1>Co daje nasza aplikacja?</h1>\n            </div>\n            <StickyScroll>\n                <p>\n                    Głównym celem naszej aplikacji jest zaplanowanie celu oraz wyćwiczenie nawyku codziennej pracy nad sobą.\n                    Dlatego też zachęcamy do używania naszej aplikacji codziennie rano przy śniadaniu lub kawie!\n                    Na każdy dzień przygotowaliśmy jedną poradę nad którą powinieneś pracować w trakcie całego dnia.\n                    Niektóre porady odblokowują ukryte funkcjonalności w aplikacji! Odblokuj je wszystkie!\n                </p>\n                <p>\n                    Nasza aplikacja nie służy do kontrolowania postępów oraz planowania codziennych zadań. \n                    Aplikacja powstała dla osób które chcą poprawnie zaplanować realizację swoich celów.\n                    Dzięki temu zwiększają one szanse na pokonanie przeciwności oraz lepiej poznają siebie.\n                    Staraliśmy się przedstawić wiele technik i sposobów które pomogą zrealizować cele. \n                </p>\n                <p>\n                    Jeśli chciałbyś podzielić się swoimi postanowieniami lub\n                    poprosić o dodatkowe porady zapraszamy Cię do naszej grupy na facebooku!\n                </p>\n                <StickyItem bottom={0}>\n                    <button type=\"button\" onClick={close}>\n                        Ok, wszystko rozumiem\n                    </button>\n                </StickyItem>\n            </StickyScroll>\n\n        </div>\n\n    );\n};\n\n","import React, { ReactNode } from 'react';\n\nimport './Header.scss';\n\ninterface HeaderProps {\n    children: ReactNode;\n    onClickBack(): void;\n}\n\n\nexport const Header: React.FC<HeaderProps> = ({children, onClickBack}: HeaderProps) => {\n\n    return (<div className=\"header\">\n        <div className=\"header__button\" >\n            <button className=\"circle two\" onClick={onClickBack} title=\"Wróć\">{'<'} </button>\n        </div>\n        <h1 className=\"header__title\" >{children}</h1>\n    </div>);\n};\n\n\n\n\n","import React from 'react';\nimport './GoalList.scss';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/root';\n\ninterface GoalListProps {\n    onClick?(index: number): void;\n}\n\nexport const GoalList: React.FC<GoalListProps> = ({ onClick }: GoalListProps) => {\n    const goalArray = useSelector((state: RootState) => state.goals);\n\n    return <>{goalArray.map((goal, index) => \n        <div className=\"goalList\" key={index} onClick={() => onClick && onClick(index)}>\n            <span>{goal.name}</span>\n        </div>\n    )}</>;\n};\n","import actionCreatorFactory from 'typescript-fsa';\nimport { Goal } from '../../reducers/goals/goalsReducer';\n \nconst actionCreator = actionCreatorFactory('GOALS');\n\nexport const createNewGoals = actionCreator<string>('CREATE_NEW');\n\ninterface EditGoalsParams{\n    index: number;\n    fields: Partial<Goal>;\n}\n\nexport const editGoals = actionCreator<EditGoalsParams>('EDIT');\n\ninterface AssignTipToGoalsParams {\n    index: number;\n    tipId: string;\n}\n\nexport const deleteGoal = actionCreator<number>('DELETE_GOAL');\nexport const assignTipToGoals = actionCreator<AssignTipToGoalsParams>('ASSIGN_TIP_TO_GOALS');\n\n","import { useDispatch } from 'react-redux';\nimport { createNewGoals } from '../store/actions/goals/action';\n\nexport function useGoalCreator(){\n    const dispatch = useDispatch();\n\n    return () => {\n        let title = prompt('Zapisz nazwę swojego celu');\n        if (title) {\n            dispatch(createNewGoals(title));\n        }\n    };\n}\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { createNewGoals, editGoals, assignTipToGoals, deleteGoal } from '../../actions/goals/action';\n\nexport interface Goal {\n    name: string;\n    why?: string;\n    specific?: string;\n    measure?: string;\n    achievable?: string;\n    time?: string;\n    exciting?: string;\n    delete?: string;\n    events?: string;\n    tipsId: string[];\n}\n\nexport type GoalField = keyof Goal;\n\nexport const GOAL_FIELDS: GoalField[] = ['name', 'why', 'specific', 'measure', 'achievable', 'time', 'exciting', 'delete'];\n\nexport type GoalsState = Goal[];\n\nexport const goalsReducer = reducerWithInitialState<GoalsState>([])\n    .case(createNewGoals, (state, name) => [...state, { name, tipsId: [] }])\n    .case(assignTipToGoals, (state, {index, tipId}) => {\n        const newState = [...state];\n        newState[index].tipsId.push(tipId);\n        return newState;\n    })\n    .case(editGoals, (state, {fields, index}) => {\n        const newState = [...state];\n\n        newState[index] = {\n            ...state[index],\n            ...fields\n        };\n        return newState;\n    })\n    .case(deleteGoal, (state, id) => state.filter((goal, index) => index !== id));\n","import React from 'react';\nimport './EditGoal.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../../../store/root';\nimport { editGoals, deleteGoal } from '../../../../store/actions/goals/action';\nimport { Goal, GOAL_FIELDS } from '../../../../store/reducers/goals/goalsReducer';\nimport { getTip } from '../../../../store/reducers/learn/learnReducer';\nimport { Header } from '../../../../components/Header/Header';\nimport { StickyScroll } from '../../../../components/StickyScroll/StickyScroll';\nimport { StickyItem } from '../../../../components/StickyItem/StickyItem';\n\ninterface EditGoalProps {\n    goalIndex: number;\n    onStopEdit(): void;\n}\n\nexport const EditGoal: React.FC<EditGoalProps> = ({ goalIndex, onStopEdit }: EditGoalProps) => {\n    const dispatch = useDispatch();\n    const goal = useSelector((state: RootState) => state.goals[goalIndex]);\n    const goalFields = useSelector((state: RootState) => state.goalFields);\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        const form = e.target as HTMLFormElement;\n        const elements = Array.from(form.elements) as HTMLInputElement[];\n        const fields = elements.reduce((fields, {value, name}) => {\n            if (value && GOAL_FIELDS.includes(name as any)) {\n                fields[name as 'name' | 'why'] = value;\n            }\n            return fields;\n        }, {} as Partial<Goal>);\n        dispatch(editGoals({\n            index: goalIndex,\n            fields\n        }));\n        onStopEdit();\n    };\n    const onClickDelete = () => {\n        if (window.confirm('Czy napewno chcesz usunąć cel?')) {\n            dispatch(deleteGoal(goalIndex));\n            onStopEdit();\n        }\n    };\n\n    return (\n        <div style={\n            {\n                display: 'grid',\n                height: '100%',\n                gridTemplateRows: 'auto 1fr'\n            }\n        }>\n            <Header onClickBack={onStopEdit}>\n                Edycja celu\n            </Header>\n            <StickyScroll>\n                <form action=\"\" onSubmit={onSubmit}>\n                    <label>\n                        Nazwa\n                        <input type=\"text\" name=\"name\" defaultValue={goal.name}/>\n                    </label>\n                    {goalFields.includes('why') && <label>\n                        Co zmieni się w twoim zyciu gdy zrealizuejsz cel? Dlaczego chcesz go osiągnać?\n                        <input type=\"text\" name=\"why\" defaultValue={goal.why}/>\n                    </label>}\n\n                    {goalFields.includes('specific') && <label>\n                        Co chcesz osiągnąć? Po co chcesz zrealizować ten cel?\n                        <input type=\"text\" name=\"specific\" defaultValue={goal.specific}/>\n                    </label>}\n\n                    {goalFields.includes('measure') && <label>\n                        W jaki sposób chcesz mierzyć postęp? Skąd bedziesz wiedział czy idzesz do przodu?\n                        <textarea name=\"measure\" defaultValue={goal.measure}/>\n                    </label>}\n\n                    {goalFields.includes('achievable') && <label>\n                        Na jakie mniejsze kroki można rozpisać twój cel?\n                        <textarea name=\"achievable\" defaultValue={goal.achievable}/>\n                    </label>}\n\n                    {goalFields.includes('time') && <label>\n                        W jakim terminie powinieneś zrealizować pierwszy mniejszy krok z listy powyżej?\n                        <textarea name=\"time\" defaultValue={goal.time}/>\n                    </label>}\n\n                    {goalFields.includes('exciting') && <label>\n                        Na jaki prezent sobie pozwolisz gdy spełnisz każdy mniejszy cel? \n                        <textarea name=\"exciting\" defaultValue={goal.exciting}/>\n                    </label>}\n\n                    {goalFields.includes('events') && <label>\n                        Jakie sytuacje mogą Ci przeszkodzić w realizacji celu? \n                        Jak zachowasz się gdy się pojawią?\n                        <textarea name=\"events\" defaultValue={goal.events}/>\n                    </label>}\n\n                    {goalFields.includes('delete') && <label>\n                        Czy na pewno ten cel jest warty Twojej uwagi?\n                        <div style={{margin: '16px 0'}}>\n                            <button \n                                type=\"button\" \n                                onClick={onClickDelete}\n                                style={{background:'red',width: 'auto', color:'white'}}\n                            >\n                                Usuń aby zyskać czas\n                            </button>\n                        </div>\n                    </label>}\n                    \n                    {goalFields.length < 7 && <div className=\"learnPage__alert\">\n                        Odczytuj codziennie wskazówki i odblokuj nowe pola do uzupełnienia.\n                        Jeszcze nie odblokowałeś wszystkich pól!\n                    </div>}\n\n                    {!!goal.tipsId.length && <h2>Przydatne wskazówki:</h2>}\n                    {goal.tipsId.map(tipId => {\n                        const tip = getTip(tipId);\n                        return <div key={tipId}>{tip.title}</div>;\n                    })}\n                \n                    <StickyItem bottom={0} >\n                        <button type=\"submit\">Zapisz</button>\n                    </StickyItem>\n                </form>\n            </StickyScroll>\n        </div>\n    );\n};\n","import React from 'react';\nimport { HomePage } from './layouts/HomePage/HomePage';\nimport { LearnPage } from './layouts/LearnPage/LearnPage';\nimport { WelcomePage } from './layouts/WelcomePage/WelcomePage';\nimport { useSelector } from 'react-redux';\nimport { RootState } from './store/root';\nimport { GoalPage } from './layouts/GoalPage/GoalPage';\nimport { AssignTipPage, AssignTipPageProps } from './layouts/AssignTipPage/AssignTipPage';\n// import PermissionPage from './layouts/PermissionPage/PermissionPage';\n// const PermissionPage = React.lazy(() => import('./layouts/PermissionPage/PermissionPage'));\n\nexport const PAGE_NAME_TO_COMPONENT = {\n    home: HomePage,\n    learn: LearnPage,\n    welcome: WelcomePage,\n    goal: GoalPage,\n    assignTip: AssignTipPage\n};\n\nexport const App: React.FC = () => {\n    // if(Notification.permission !== 'granted'){\n    //     return <PermissionPage />;\n    // }\n    const pageName = useSelector((state:RootState) => state.page.name);\n    const pageProps = useSelector((state:RootState) => state.page.props) as AssignTipPageProps;\n    const Component = PAGE_NAME_TO_COMPONENT[pageName];\n    return (\n        <Component {...pageProps}/>\n    );\n};\n\n","import React, { useState } from 'react';\nimport './HomePage.scss';\nimport { usePageRoute } from '../../hooks/usePageRoute';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/root';\nimport { useLearnStats } from '../../hooks/useLearnStats';\nimport { Quote } from '../../components/Quote/Quote';\nimport { useShare } from '../../hooks/useShare';\nimport { useSaveState } from '../../hooks/useSaveState';\nimport { StickyScroll } from '../../components/StickyScroll/StickyScroll';\nimport { ReadMePage } from '../ReadMePage/ReadMePage';\n\nexport const HomePage: React.FC = () => {\n    const goToLearn = usePageRoute('learn');\n    const goToGoal = usePageRoute('goal');\n    const countGoal = useSelector((state: RootState) => state.goals.length);\n    const {allTipsCount, readTipsCount} = useLearnStats();\n    const share = useShare();\n    const saveState = useSaveState();\n    const [showReadMe, setShowReadMe] =  useState(localStorage.getItem('read-read-me-page') || 'yes');\n    \n    if (showReadMe === 'yes') {\n        return <ReadMePage close={() => {\n            setShowReadMe('no');\n            localStorage.setItem('read-read-me-page', 'no');\n        }}/>;\n    }\n    return (\n        <div  style={\n            {\n                display: 'grid',\n                height: '100%',\n                gridTemplateRows: 'auto 1fr'\n            }\n        }>\n            <div>\n                <h1>Mój everest</h1>\n                <Quote />\n            </div>\n            <StickyScroll>\n                <div  style={\n                    {\n                        display: 'grid',\n                        gap: '16px',\n                        gridTemplateColumns: '1fr 1fr',\n                        gridTemplateRows: 'auto'\n                    }\n                }>\n                    <div>\n                        <button type=\"button\" onClick={goToGoal}>\n                            <svg style={{ width:'48px',height:'48px' }} viewBox=\"0 0 24 24\">\n                                <path fill=\"#000000\" d=\"M14,6L10.25,11L13.1,14.8L11.5,16C9.81,13.75 7,10 7,10L1,18H23L14,6Z\" />\n                            </svg>\n                            <br/>\n                            Moje cele\n                            <br/>\n                            <small >Liczba celów to <strong>{countGoal}</strong>.</small>\n                        </button>\n                    </div>\n                    <div>\n                        <button type=\"button\" onClick={goToLearn} disabled={readTipsCount === allTipsCount}>\n                            <svg style={{ width:'48px',height:'48px' }} viewBox=\"0 0 24 24\">\n                                <path fill=\"#000000\" d=\"M11 23C9.9 23 9 22.1 9 21V19H15V21C15 22.1 14.1 23 13 23H11M12 3C12.28 3 12.55 3 12.81 3.05C13.42 4.22 14 6.26 14 9C14 11.1 13 16 13 16H11C11 16 10 11.1 10 9C10 6.26 10.58 4.22 11.19 3.05C11.45 3 11.72 3 12 3M12 1C11.29 1 10.61 1.09 9.95 1.26C8.78 2.83 8 5.71 8 9C8 11.28 8.38 13.37 9 16C9 17.1 9.9 18 11 18H13C14.1 18 15 17.1 15 16C15.62 13.37 16 11.28 16 9C16 5.71 15.22 2.83 14.05 1.26C13.39 1.09 12.71 1 12 1M4 8C4 11.18 5.85 15.92 8.54 17.21C8 16.21 7.61 14.67 7.34 13C6.55 11.53 6 9.62 6 8C6 6.66 6.44 5.67 7.47 4.8C7.73 3.67 8.09 2.65 8.54 1.79C5.85 3.08 4 4.82 4 8M15.46 1.79C15.91 2.65 16.27 3.67 16.53 4.8C17.56 5.67 18 6.66 18 8C18 9.62 17.45 11.53 16.66 13C16.39 14.67 16 16.21 15.46 17.21C18.15 15.92 20 11.18 20 8S18.15 3.08 15.46 1.79Z\" />\n                            </svg>\n                            <br/>\n                            Rozwijaj się\n                            <br/>\n                            <small >Odkryto <strong>{readTipsCount}</strong> / {allTipsCount} porad.</small>\n                        </button>\n                    </div>\n                    <div>\n                        <button type=\"button\" onClick={saveState} style={{lineHeight: 1}}>\n                            <svg style={{ width:'48px',height:'48px' }} viewBox=\"0 0 24 24\">\n                                <path fill=\"#000000\" d=\"M17 3H5C3.89 3 3 3.9 3 5V19C3 20.1 3.89 21 5 21H19C20.1 21 21 20.1 21 19V7L17 3M19 19H5V5H16.17L19 7.83V19M12 12C10.34 12 9 13.34 9 15S10.34 18 12 18 15 16.66 15 15 13.66 12 12 12M6 6H15V10H6V6Z\" />\n                            </svg>\n                            <br/>\n                            Kopia zapasowa\n                            <br/>\n                            <small style={{display: 'inline-block', marginTop:'8px',fontWeight: 400, fontFamily: '\\'Open Sans\\', sans-serif'}}>Zapisz swoje cele do pliku</small>\n                        </button>\n                    </div>\n                    <div>\n                        <a role=\"button\" href=\"https://www.facebook.com/groups/469640063985423/about/\" target=\"_blank\" rel=\"noopener noreferrer\" style={{lineHeight: 1}}>\n                            <svg style={{ width:'48px',height:'48px' }} viewBox=\"0 0 24 24\">\n                                <path fill=\"#000000\" d=\"M12,5A3.5,3.5 0 0,0 8.5,8.5A3.5,3.5 0 0,0 12,12A3.5,3.5 0 0,0 15.5,8.5A3.5,3.5 0 0,0 12,5M12,7A1.5,1.5 0 0,1 13.5,8.5A1.5,1.5 0 0,1 12,10A1.5,1.5 0 0,1 10.5,8.5A1.5,1.5 0 0,1 12,7M5.5,8A2.5,2.5 0 0,0 3,10.5C3,11.44 3.53,12.25 4.29,12.68C4.65,12.88 5.06,13 5.5,13C5.94,13 6.35,12.88 6.71,12.68C7.08,12.47 7.39,12.17 7.62,11.81C6.89,10.86 6.5,9.7 6.5,8.5C6.5,8.41 6.5,8.31 6.5,8.22C6.2,8.08 5.86,8 5.5,8M18.5,8C18.14,8 17.8,8.08 17.5,8.22C17.5,8.31 17.5,8.41 17.5,8.5C17.5,9.7 17.11,10.86 16.38,11.81C16.5,12 16.63,12.15 16.78,12.3C16.94,12.45 17.1,12.58 17.29,12.68C17.65,12.88 18.06,13 18.5,13C18.94,13 19.35,12.88 19.71,12.68C20.47,12.25 21,11.44 21,10.5A2.5,2.5 0 0,0 18.5,8M12,14C9.66,14 5,15.17 5,17.5V19H19V17.5C19,15.17 14.34,14 12,14M4.71,14.55C2.78,14.78 0,15.76 0,17.5V19H3V17.07C3,16.06 3.69,15.22 4.71,14.55M19.29,14.55C20.31,15.22 21,16.06 21,17.07V19H24V17.5C24,15.76 21.22,14.78 19.29,14.55M12,16C13.53,16 15.24,16.5 16.23,17H7.77C8.76,16.5 10.47,16 12,16Z\" />\n                            </svg>\n                            <br/>\n                            Zapytaj o pomoc\n                            <br/>\n                            <small style={{display: 'inline-block', marginTop:'8px',fontWeight: 400, fontFamily: '\\'Open Sans\\', sans-serif'}}>Zapisz się do grupy na facebooku!</small>\n                        </a>\n                    </div>\n                </div>\n                {/* <div>\n                    {!share && <button type=\"button\" onClick={share} style={{lineHeight: 1, marginTop:'16px'}}>\n                        Zmotywuj znajomych\n                        <br/>\n                        <small style={{display: 'inline-block', marginTop:'8px',fontWeight: 400, fontFamily: '\\'Open Sans\\', sans-serif'}}>Poleć naszą aplikacje jeśli Ci się podoba!</small>\n                    </button>}\n                </div> */}\n            </StickyScroll>\n\n        </div>\n\n    );\n};\n","import React, { useState } from 'react';\nimport './LearnPage.scss';\nimport { LearnGroupNames, LEARN_TIP_GROUP } from '../../store/reducers/learn/learnReducer';\nimport { NewTip, countReadTips } from './components/NewTip/NewTip';\nimport { usePageRoute } from '../../hooks/usePageRoute';\nimport { useSelector } from 'react-redux';\nimport { Header } from '../../components/Header/Header';\nimport { isRead } from '../../store/selector/todayRead/selector';\n\nexport const LearnPage: React.FC = () => {\n    const goToHome = usePageRoute('home');\n    const [page, setPage] = useState<LearnGroupNames|null>(null);\n    const mindCount = useSelector(countReadTips('mind'));\n    const timeCount = useSelector(countReadTips('time'));\n    const fitCount = useSelector(countReadTips('fit'));\n    const isReadToday = useSelector(isRead);\n\n    if(page !== null) {\n        return <NewTip groupName={page} onRead={() => {\n            setPage(null);\n        }} />;\n    }\n    return (\n        <div className=\"learnPage\">\n            <Header onClickBack={goToHome}>\n                Rozwijaj się\n            </Header>\n            <p>Wybierz jeden z trzech obszarów w których chciałbyś się rozwijać. Dziennie może odczytać tylko jedną wzkazówkę. Niektóre wskazówki odblokowują ukryte funkcje aplikacji!</p>\n            <div className=\"learnPage__buttons\">\n \n                <button className=\"inline\"  type=\"button\" onClick={() => setPage('mind')} disabled={mindCount === LEARN_TIP_GROUP.mind.length || isReadToday}>\n                    <svg style={{ width:'48px',height:'48px' }} viewBox=\"0 0 24 24\">\n                        <path fill=\"#000000\" d=\"M12,16C12.56,16.84 13.31,17.53 14.2,18L12,20.2L9.8,18C10.69,17.53 11.45,16.84 12,16M17,11.2A2,2 0 0,0 15,13.2A2,2 0 0,0 17,15.2A2,2 0 0,0 19,13.2C19,12.09 18.1,11.2 17,11.2M7,11.2A2,2 0 0,0 5,13.2A2,2 0 0,0 7,15.2A2,2 0 0,0 9,13.2C9,12.09 8.1,11.2 7,11.2M17,8.7A4,4 0 0,1 21,12.7A4,4 0 0,1 17,16.7A4,4 0 0,1 13,12.7A4,4 0 0,1 17,8.7M7,8.7A4,4 0 0,1 11,12.7A4,4 0 0,1 7,16.7A4,4 0 0,1 3,12.7A4,4 0 0,1 7,8.7M2.24,1C4,4.7 2.73,7.46 1.55,10.2C1.19,11 1,11.83 1,12.7A6,6 0 0,0 7,18.7C7.21,18.69 7.42,18.68 7.63,18.65L10.59,21.61L12,23L13.41,21.61L16.37,18.65C16.58,18.68 16.79,18.69 17,18.7A6,6 0 0,0 23,12.7C23,11.83 22.81,11 22.45,10.2C21.27,7.46 20,4.7 21.76,1C19.12,3.06 15.36,4.69 12,4.7C8.64,4.69 4.88,3.06 2.24,1Z\" />\n                    </svg>\n                    <br/>\n                    Wiedza\n                    <br/>\n                    <small className=\"learnPage__buttonDesc\">Lekcji {mindCount}/{LEARN_TIP_GROUP.mind.length}</small>\n                    \n                </button>\n\n                <button className=\"inline\" type=\"button\" onClick={() => setPage('time')} disabled={timeCount === LEARN_TIP_GROUP.time.length || isReadToday}>\n                    <svg style={{ width:'48px',height:'48px' }} viewBox=\"0 0 24 24\">\n                        <path fill=\"#000000\" d=\"M12,20A7,7 0 0,1 5,13A7,7 0 0,1 12,6A7,7 0 0,1 19,13A7,7 0 0,1 12,20M19.03,7.39L20.45,5.97C20,5.46 19.55,5 19.04,4.56L17.62,6C16.07,4.74 14.12,4 12,4A9,9 0 0,0 3,13A9,9 0 0,0 12,22C17,22 21,17.97 21,13C21,10.88 20.26,8.93 19.03,7.39M11,14H13V8H11M15,1H9V3H15V1Z\" />\n                    </svg>\n                    <br/>\n                    Czas\n                    <br/>\n                    <small className=\"learnPage__buttonDesc\">Lekcji {timeCount}/{LEARN_TIP_GROUP.time.length}</small>\n                </button>\n\n                <button className=\"inline\"  type=\"button\" onClick={() => setPage('fit')} disabled={fitCount === LEARN_TIP_GROUP.fit.length || isReadToday}>\n                    <svg style={{ width:'48px',height:'48px' }} viewBox=\"0 0 24 24\">\n                        <path fill=\"#000000\" d=\"M7 7.76V16.25H11.08L11.68 15.34C12.84 13.55 14.93 12.75 16.47 12.75C17 12.75 17.45 12.84 17.79 13C18.7 13.41 18.95 14.18 19 14.74C19.08 15.87 18.5 17.03 17.5 17.71C16.6 18.33 14.44 19 11.87 19C10.12 19 7.61 18.69 5.12 17.3C5.41 14.85 6 10.88 7 7.76M7 3C4 7.09 3 18.34 3 18.34C5.9 20.31 9.08 21 11.87 21C14.86 21 17.39 20.21 18.64 19.36C21.64 17.32 21.94 12.71 18.64 11.18C18 10.89 17.26 10.75 16.47 10.75C14.17 10.75 11.5 11.96 10 14.25H9V7.09H11L12 4L7 3Z\" />\n                    </svg>\n                    <br/>\n                    Zdrowie\n                    <br/>\n                    <small  className=\"learnPage__buttonDesc\">Lekcji {fitCount}/{LEARN_TIP_GROUP.fit.length}</small>\n                </button>\n            </div>\n\n            {isReadToday && <div className=\"learnPage__alert\">\n                Dziś już odczytałeś swoją lekcje. \n                Ćwicz wytrwałośc i wróć jutro. \n                Regularność jest o wiele ważniejsza od ilości wykonanej pracy!\n                Do zobaczenia przy porannej kawie!\n            </div>}\n\n        </div>\n\n    );\n};\n","import React from 'react';\nimport './WelcomePage.scss';\nimport { GoalList } from '../../components/GoalList/GoalList';\nimport { useGoalCreator } from '../../hooks/useGoalCreator';\nimport { usePageRoute } from '../../hooks/usePageRoute';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../store/root';\nimport { StickyScroll } from '../../components/StickyScroll/StickyScroll';\nimport { StickyItem } from '../../components/StickyItem/StickyItem';\n\nexport const WelcomePage: React.FC = () => {\n    const countGoal = useSelector((state: RootState) => state.goals.length);\n    const createGoal = useGoalCreator();\n    const goToHome = usePageRoute('home');\n    return (\n        <div style={\n            {\n                display: 'grid',\n                height: '100%',\n                gridTemplateRows: 'auto 1fr'\n            }\n        }>\n            <h1>Witaj w naszej aplikacji!</h1>\n            <StickyScroll>\n                <p>\n                    Na początek wypisz swoje wszystkie cele, plany, marzenia które chciałbyś zrealizować. Będziemy intensywnie nad nimi pracować abyś mógł je spełnić. Zapisz także bardzo odległe cele, być może uda się je spełnić \n                    <span role=\"img\" aria-label=\"\">😉</span>\n                    Jeśli zapomnisz wpisać teraz celu mozna go dodać później :)\n                </p>\n\n                <StickyItem top={0}>\n                    <button type=\"button\" onClick={createGoal}>Dodaj cel lub postanownie</button>\n                </StickyItem>\n\n                <GoalList/>\n\n                <div style={{height:\"50vh\"}}></div>\n\n                <StickyItem bottom={0}>\n                    <button type=\"button\" className=\"two\" onClick={() => {\n                        if(countGoal <= 0) {\n                            return alert('Dodaj przynajmniej jeden cel nad którym możesz pracować!');\n                        }\n                        goToHome();\n                    }}>\n                        Zakończ dodawanie\n                    </button>\n                </StickyItem>\n            </StickyScroll>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport './GoalPage.scss';\nimport { GoalList } from '../../components/GoalList/GoalList';\nimport { useGoalCreator } from '../../hooks/useGoalCreator';\nimport { usePageRoute } from '../../hooks/usePageRoute';\nimport { EditGoal } from './components/EditGoal/EditGoal';\nimport { Header } from '../../components/Header/Header';\nimport { StickyScroll } from '../../components/StickyScroll/StickyScroll';\nimport { StickyItem } from '../../components/StickyItem/StickyItem';\n\nexport const GoalPage: React.FC = () => {\n    const createGoal = useGoalCreator();\n    const goToHome = usePageRoute('home');\n    const [editIndex, setEditIndex] = useState<number | null>(null);\n\n    if(editIndex !== null){\n        return <EditGoal goalIndex={editIndex} onStopEdit={() => setEditIndex(null)}/>;\n    }\n    return (\n        <div style={\n            {\n                display: 'grid',\n                height: '100%',\n                gridTemplateRows: 'auto 1fr'\n            }\n        }>\n            <Header onClickBack={goToHome}>\n                Twoje cele\n            </Header>\n            <StickyScroll>\n                <p>Kliknij w nazwe celu aby go przeglądać lub edytować.</p>\n                <GoalList onClick={index => setEditIndex(index)}/>\n\n                <StickyItem bottom={0}>\n                    <button type=\"button\" onClick={createGoal}>Dodaj nowy cel</button>\n                </StickyItem>\n            </StickyScroll>\n        </div>\n    );\n};\n","import React, { useState } from 'react';\nimport './AssignTipPage.scss';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from '../../store/root';\nimport { assignTipToGoals } from '../../store/actions/goals/action';\nimport { usePageRoute } from '../../hooks/usePageRoute';\n\nexport interface AssignTipPageProps {\n    tipId: string\n}\n\nexport const AssignTipPage: React.FC<AssignTipPageProps> = ({ tipId }: AssignTipPageProps) => {\n    const dispatch = useDispatch();\n    const goToHome = usePageRoute('home');\n    const goalArray = useSelector((state: RootState) => state.goals);\n    const [selectedIndex, setSelectedIndex] = useState<number[]>([]);\n    const toggleSelectByIndex = (index: number) => {\n        if (selectedIndex.includes(index)) {\n            setSelectedIndex(selectedIndex.filter((value) => value !== index));\n        } else {\n            setSelectedIndex([...selectedIndex, index]);\n        }\n    };\n\n    return (\n        <div className=\"assignTipPage\">\n            <h2>Do których celów użyjesz zdobytą wiedzę?</h2>\n            \n            {goalArray.map((goal, index) => \n                <label key={index} className=\"assignTipPage__goal\">\n                    <input \n                        className=\"assignTipPage__input\"\n                        type=\"checkbox\" \n                        onChange={() => toggleSelectByIndex(index)} \n                        checked={selectedIndex.includes(index)}\n                    />\n                    <span>{goal.name}</span>\n                </label>\n            )}\n\n            <button onClick={() => {\n                selectedIndex.forEach((index) => {\n                    dispatch(assignTipToGoals({\n                        index,\n                        tipId\n                    }));\n                });\n                goToHome();\n            }}>\n                Gotowe\n            </button>\n        </div>\n    );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\n\nexport interface TipsState {\n\n}\n\nexport const tipsReducer = reducerWithInitialState<TipsState>({});\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { PAGE_NAME_TO_COMPONENT } from '../../../App';\nimport { goToPage } from '../../actions/page/action';\n\nexport type PageName = keyof typeof PAGE_NAME_TO_COMPONENT;\n\nexport interface PageState {\n    name: PageName;\n    props: {[key: string]: any};\n}\n\nexport const pageReducer = reducerWithInitialState<PageState>({\n    name: 'welcome',\n    props: {}\n})\n    .case(goToPage, (state, payload) => payload);\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { readTip } from '../../actions/learn/action';\nimport { getTip } from '../learn/learnReducer';\n\nexport type GoalFieldsState = string[];\n\nexport const goalFieldsReducer = reducerWithInitialState<GoalFieldsState>([])\n    .case(readTip, (state, {id}) => [...state, ...getTip(id).unlockFields]);\n\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\nimport { addToastr, deleteToastr } from '../../actions/toastr/action';\n\nexport type Toastr = {\n    type: 'success'|'error'|'warning'|'info',\n    message: string;\n    time?: number;\n    id: number;\n}\n\nexport type ToastrState = {\n    messages: Toastr[],\n    incrementId: number;\n};\n\nexport const toastrReducer = reducerWithInitialState<ToastrState>({\n    messages: [],\n    incrementId: 0,\n})\n    .case(addToastr, (state, {message, type, time}) => ({ \n        messages: [\n            ...state.messages, \n            {\n                id: state.incrementId++,\n                message,\n                time,\n                type\n            }\n        ], \n        incrementId: state.incrementId++\n    }))\n    .case(deleteToastr, (state, id) => ({ \n        ...state,\n        messages: state.messages.filter((message) => message.id !== id), \n    }));\n\n","\nimport { combineReducers, createStore, Action } from 'redux';\nimport { goalsReducer, GoalsState } from './reducers/goals/goalsReducer';\nimport { tipsReducer, TipsState } from './reducers/tips/tipsReducer';\nimport { LearnState, learnReducer } from './reducers/learn/learnReducer';\nimport { PageState, pageReducer } from './reducers/page/pageReducer';\nimport { goalFieldsReducer, GoalFieldsState } from './reducers/goalFields/goalFieldsReducer';\nimport { ToastrState, toastrReducer } from './reducers/toastr/toastrReducer';\nimport { TodayReadState, todayReadReducer } from './reducers/todayRead/todayReadReducer';\n\nexport interface RootState {\n    goals: GoalsState,\n    tips: TipsState,\n    learn: LearnState,\n    page: PageState,\n    goalFields: GoalFieldsState,\n    toastr: ToastrState,\n    todayRead: TodayReadState\n}\n\nconst rootReducer = combineReducers({\n    goals: goalsReducer, \n    tips: tipsReducer, \n    learn: learnReducer,\n    page: pageReducer,\n    goalFields: goalFieldsReducer,\n    toastr: toastrReducer,\n    todayRead: todayReadReducer,\n});\n\nconst initialState: RootState = JSON.parse(window.localStorage.getItem('state') || '{}') as RootState;\n\n// @ts-ignore\nexport const store = createStore<RootState, Action, unknown, unknown>(rootReducer, initialState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\nstore.subscribe(() => {\n    const state = store.getState();\n    window.localStorage.setItem('state', JSON.stringify(state));\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\n\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/root';\nimport { Toastr } from './components/Toastr/Toastr';\n\nReactDOM.render(<Provider store={store}>\n    <React.Suspense fallback={null}>\n        <App />\n        <Toastr />\n    </React.Suspense>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useState } from 'react';\nimport { Block, Element } from 'react-simple-bem';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { RootState } from '../../store/root';\nimport { deleteToastr } from '../../store/actions/toastr/action';\nimport './Toastr.scss';\n\nexport const Toastr: React.FC = () => {\n    const [hideId, setHideId] = useState<number[]>([]);\n    const [renderId, setRenderId] = useState<number[]>([]);\n    const messages = useSelector((state: RootState) => state.toastr.messages);\n    const dispatch = useDispatch();\n    return (\n        <Block bemName=\"toastr\">\n            {messages.map((message) => {\n                if (renderId.indexOf(message.id) === -1) {\n                    setTimeout(() => {\n                        setRenderId((state) => [...state, message.id]);\n                    }, 1);\n\n                    setTimeout(() => {\n                        setHideId((state) => [...state, message.id]);\n                    }, message.time || 9000);\n                }\n\n                return (\n                    <Element\n                        key={message.id}\n                        bemName=\"message\"\n                        bemMod={{\n                            [message.type]: true,\n                            show: renderId.indexOf(message.id) !== -1,\n                            hide: hideId.indexOf(message.id) !== -1,\n                        }}\n                        onTransitionEnd={() => hideId.indexOf(message.id) !== -1 && dispatch(deleteToastr(message.id))}\n                    >\n                        {message.message}\n                    </Element>\n                );\n            })}\n        </Block>\n    );\n}\n"],"sourceRoot":""}