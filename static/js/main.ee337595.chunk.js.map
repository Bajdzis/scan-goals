{"version":3,"sources":["store/actions/page/action.ts","hooks/usePageRoute.ts","store/actions/learn/action.ts","store/reducers/learn/learnReducer.ts","layouts/LearnPage/components/NewTip/NewTip.tsx","hooks/useLearnStats.ts","hooks/useQuote.ts","components/Quote/Quote.tsx","components/GoalList/GoalList.tsx","store/actions/goals/action.ts","hooks/useGoalCreator.ts","store/reducers/goals/goalsReducer.ts","layouts/GoalPage/components/EditGoal/EditGoal.tsx","App.tsx","layouts/HomePage/HomePage.tsx","layouts/LearnPage/LearnPage.tsx","layouts/WelcomePage/WelcomePage.tsx","layouts/GoalPage/GoalPage.tsx","layouts/AssignTipPage/AssignTipPage.tsx","serviceWorker.ts","store/reducers/tips/tipsReducer.ts","store/reducers/page/pageReducer.ts","store/root.ts","index.tsx"],"names":["goToPage","actionCreatorFactory","actionCreator","usePageRoute","page","dispatch","useDispatch","name","props","readTip","learnReducer","reducerWithInitialState","mind","goodTips","badTips","time","fit","case","state","payload","groupName","feedback","id","LEARN_TIP","title","description","getTip","LEARN_TIP_GROUP","countReadTips","group","learn","length","NewTip","onRead","count","useSelector","tip","onClick","tipId","useLearnStats","mindCount","timeCount","fitCount","allTipsCount","readTipsCount","QUOTES","value","author","Quote","quote","useQuote","GoalList","goalArray","goals","map","goal","index","key","createNewGoals","editGoals","assignTipToGoals","useGoalCreator","prompt","GOAL_FIELDS","goalsReducer","tipsId","newState","push","fields","EditGoal","goalIndex","onStopEdit","action","onSubmit","e","preventDefault","form","target","Array","from","elements","reduce","includes","type","defaultValue","PAGE_NAME_TO_COMPONENT","home","goToLearn","goToGoal","countGoal","disabled","goToHome","useState","setPage","welcome","createGoal","editIndex","setEditIndex","assignTip","selectedIndex","setSelectedIndex","onChange","filter","toggleSelectByIndex","checked","forEach","App","pageName","pageProps","Component","Boolean","window","location","hostname","match","tipsReducer","pageReducer","rootReducer","combineReducers","tips","initialState","JSON","parse","localStorage","getItem","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","subscribe","getState","setItem","stringify","ReactDOM","render","Suspense","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ee337595.chunk.js","sourcesContent":["import actionCreatorFactory from 'typescript-fsa';\r\nimport { PageState } from '../../reducers/page/pageReducer';\r\n \r\nconst actionCreator = actionCreatorFactory('PAGE');\r\n\r\nexport const goToPage = actionCreator<PageState>('GO_TO_PAGE');\r\n","import { useDispatch } from 'react-redux';\r\nimport { PageName } from '../store/reducers/page/pageReducer';\r\nimport { goToPage } from '../store/actions/page/action';\r\n\r\nexport function usePageRoute(page: PageName){\r\n    const dispatch = useDispatch();\r\n\r\n    return () => {\r\n        dispatch(goToPage({\r\n            name: page,\r\n            props: {}\r\n        }));\r\n    };\r\n}\r\n","import actionCreatorFactory from 'typescript-fsa';\r\nimport { LearnGroupNames } from '../../reducers/learn/learnReducer';\r\n \r\nconst actionCreator = actionCreatorFactory('LEARN');\r\n\r\ninterface ReadTipParams {\r\n    id: string;\r\n    groupName: LearnGroupNames;\r\n    feedback: 'good'|'bad';\r\n}\r\n\r\nexport const readTip = actionCreator<ReadTipParams>('READ_TIP');\r\n\r\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\r\nimport { readTip } from '../../actions/learn/action';\r\n\r\nexport interface LearnGroup {\r\n    goodTips: string[];\r\n    badTips: string[];\r\n}\r\n\r\nexport interface LearnState {\r\n    mind: LearnGroup;\r\n    time: LearnGroup;\r\n    fit: LearnGroup;\r\n}\r\n\r\nexport type LearnGroupNames = keyof LearnState;\r\n\r\nconst INITIAL_STATE: LearnState = {\r\n    mind: { goodTips: [], badTips:[]},\r\n    time: { goodTips: [], badTips:[]},\r\n    fit: { goodTips: [], badTips:[]},\r\n};\r\n\r\nexport const learnReducer = reducerWithInitialState<LearnState>(INITIAL_STATE)\r\n    .case(readTip, (state, payload) => {\r\n        return {\r\n            ...state,\r\n            [payload.groupName]: {\r\n                goodTips: [...state[payload.groupName].goodTips, ...(payload.feedback === 'good' ? [payload.id] : [])],\r\n                badTips: [...state[payload.groupName].badTips, ...(payload.feedback === 'bad' ? [payload.id] : [])]\r\n            }\r\n        };\r\n    });\r\n\r\n\r\nexport interface LearnTip {\r\n    id: string;\r\n    title: string;\r\n    description: string;\r\n}\r\n\r\nconst LEARN_TIP: {[key: string]: Omit<LearnTip, 'id'>} = {\r\n    'mind-1' : {\r\n        title: 'Zerwij z rozmyślaniem',\r\n        description: 'Jest tylko tu i teraz. Skończ z myśleniem o przeszłości i przyszłosci.'\r\n    },\r\n    'time-1': {\r\n        title: 'Skup się!',\r\n        description: 'Zmiejsz ilość powiadomień'\r\n    },\r\n    'fit-1': {\r\n        title: 'Rusz się!',\r\n        description: 'Koniec z windą'\r\n    },\r\n    'fit-2': {\r\n        title: 'Rób pomiary!',\r\n        description: 'Sprawdzaj czy Twoje działania przynoszą pożadany skutek'\r\n    }\r\n};\r\n\r\nexport function getTip(id: string): LearnTip {\r\n    if(LEARN_TIP[id]){\r\n        return { ...LEARN_TIP[id] , id};\r\n    }\r\n    return {\r\n        id: 'unknown',\r\n        description: '',\r\n        title: ''\r\n    };\r\n}\r\n\r\nexport const LEARN_TIP_GROUP: {[key in LearnGroupNames]: LearnTip[]} = {\r\n    mind: [\r\n        getTip('mind-1')\r\n    ],\r\n    time:[\r\n        getTip('time-1')\r\n    ],\r\n    fit: [\r\n        getTip('fit-1'),\r\n        getTip('fit-1')\r\n    ]\r\n};\r\n","import React from 'react';\r\nimport './NewTip.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LearnGroupNames, LEARN_TIP_GROUP } from '../../../../store/reducers/learn/learnReducer';\r\nimport { RootState } from '../../../../store/root';\r\nimport { readTip } from '../../../../store/actions/learn/action';\r\nimport { goToPage } from '../../../../store/actions/page/action';\r\n\r\ninterface NewTipProps {\r\n    groupName: LearnGroupNames;\r\n    onRead(): void;\r\n}\r\n\r\nexport const countReadTips = (groupName: LearnGroupNames) => (state: RootState) => {\r\n    const group = state.learn[groupName];\r\n    return group.badTips.length + group.goodTips.length;\r\n};\r\n\r\nexport const NewTip: React.FC<NewTipProps> = ({ groupName, onRead }: NewTipProps) => {\r\n    const dispatch = useDispatch();\r\n    const count = useSelector(countReadTips(groupName));\r\n    const tip = LEARN_TIP_GROUP[groupName][count] || null;\r\n    if(tip === null){\r\n        return null;\r\n    }\r\n    const onClick = (feedback: 'good'| 'bad') => {\r\n        onRead();\r\n        dispatch(readTip({\r\n            feedback,\r\n            groupName,\r\n            id: tip.id\r\n        }));\r\n        feedback === 'good' && dispatch(goToPage({\r\n            name:'assignTip',\r\n            props: {\r\n                tipId: tip.id\r\n            }\r\n        }));\r\n    };\r\n    return (\r\n        <div>\r\n            <h1>{tip.title}</h1>\r\n            <p>{tip.description}</p>\r\n            <h2>Czy porada przyda Ci się do realizacji któregoś z celów?</h2>\r\n            <button onClick={() => onClick('good')}>Tak</button>\r\n            <button onClick={() => onClick('bad')}>Nie</button>\r\n        </div>\r\n    );\r\n};\r\n","import { LEARN_TIP_GROUP } from '../store/reducers/learn/learnReducer';\r\nimport { useSelector } from 'react-redux';\r\nimport { countReadTips } from '../layouts/LearnPage/components/NewTip/NewTip';\r\n\r\nexport function useLearnStats(){\r\n    const mindCount = useSelector(countReadTips('mind'));\r\n    const timeCount = useSelector(countReadTips('time'));\r\n    const fitCount = useSelector(countReadTips('fit'));\r\n\r\n    const allTipsCount = LEARN_TIP_GROUP.mind.length + LEARN_TIP_GROUP.time.length + LEARN_TIP_GROUP.fit.length;\r\n\r\n    return {\r\n        allTipsCount,\r\n        readTipsCount: mindCount + timeCount + fitCount\r\n    };\r\n}\r\n","import { useLearnStats } from './useLearnStats';\r\n\r\ninterface Quote {\r\n    value: string;\r\n    author: string;\r\n}\r\n\r\nexport function useQuote() {\r\n    const {readTipsCount} = useLearnStats();\r\n    return QUOTES[readTipsCount] || QUOTES[0];\r\n}\r\n\r\n\r\nconst QUOTES: Quote[] = [\r\n    {\r\n        value: 'Sukces jest sumą małych wysiłków, powtarzanych dzień po dniu.',\r\n        author: 'Robert Collier'\r\n    },\r\n    {\r\n        value: 'Nie próbuj, rób albo nie rób, nie ma próbowania',\r\n        author: 'Mistrz Yoda'\r\n    },\r\n    {\r\n        value: 'Jeżeli chcesz uniknąć krytyki: nic nie mów, nic nie rób, bądź nikim.',\r\n        author: 'Arystoteles'\r\n    },\r\n    {\r\n        value: 'W życiu nie chodzi o to, by siebie odnaleźć. W życiu chodzi o to, aby siebie stworzyć!',\r\n        author: 'George Bernard Shaw'\r\n    },\r\n    {\r\n        value: 'Nic nie jest szczególnie trudne, jeżeli podzielisz to na małe zadania.',\r\n        author: 'Henry Ford'\r\n    },\r\n    {\r\n        value: 'Nie ma znaczenia jak wolno idziesz, tak długo jak nie przestajesz.',\r\n        author: 'Konfucjusz'\r\n    },\r\n    {\r\n        value: 'Nigdy nie rezygnuj z marzenia, tylko dlatego, że zrealizowanie go wymaga czasu. Czas i tak upłynie.',\r\n        author: 'Earl Nightingale'\r\n    }\r\n];\r\n","import React from 'react';\r\nimport './Quote.scss';\r\nimport { useQuote } from '../../hooks/useQuote';\r\n\r\nexport const Quote: React.FC = () => {\r\n    const quote = useQuote();\r\n\r\n    return (<div >\r\n        {quote.value}\r\n         - \r\n        {quote.author}\r\n    </div>);\r\n};\r\n","import React from 'react';\r\nimport './GoalList.scss';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/root';\r\n\r\ninterface GoalListProps {\r\n    onClick?(index: number): void;\r\n}\r\n\r\nexport const GoalList: React.FC<GoalListProps> = ({ onClick }: GoalListProps) => {\r\n    const goalArray = useSelector((state: RootState) => state.goals);\r\n\r\n    return <>{goalArray.map((goal, index) => \r\n        <div key={index} onClick={() => onClick && onClick(index)}>\r\n            <h2>{goal.name}</h2>\r\n        </div>\r\n    )}</>;\r\n};\r\n","import actionCreatorFactory from 'typescript-fsa';\r\nimport { Goal } from '../../reducers/goals/goalsReducer';\r\n \r\nconst actionCreator = actionCreatorFactory('GOALS');\r\n\r\nexport const createNewGoals = actionCreator<string>('CREATE_NEW');\r\n\r\ninterface EditGoalsParams{\r\n    index: number;\r\n    fields: Partial<Goal>;\r\n}\r\n\r\nexport const editGoals = actionCreator<EditGoalsParams>('EDIT');\r\n\r\ninterface AssignTipToGoalsParams {\r\n    index: number;\r\n    tipId: string;\r\n}\r\n\r\nexport const assignTipToGoals = actionCreator<AssignTipToGoalsParams>('ASSIGN_TIP_TO_GOALS');\r\n\r\n","import { useDispatch } from 'react-redux';\r\nimport { createNewGoals } from '../store/actions/goals/action';\r\n\r\nexport function useGoalCreator(){\r\n    const dispatch = useDispatch();\r\n\r\n    return () => {\r\n        let title = prompt('Zapisz nazwę swojego celu');\r\n        if (title) {\r\n            dispatch(createNewGoals(title));\r\n        }\r\n    };\r\n}\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\r\nimport { createNewGoals, editGoals, assignTipToGoals } from '../../actions/goals/action';\r\n\r\nexport interface Goal {\r\n    name: string;\r\n    tipsId: string[];\r\n}\r\n\r\nexport type GoalField = keyof Goal;\r\n\r\nexport const GOAL_FIELDS: GoalField[] = ['name'];\r\n\r\nexport type GoalsState = Goal[];\r\n\r\nexport const goalsReducer = reducerWithInitialState<GoalsState>([])\r\n    .case(createNewGoals, (state, name) => [...state, { name, tipsId: [] }])\r\n    .case(assignTipToGoals, (state, {index, tipId}) => {\r\n        const newState = [...state];\r\n        newState[index].tipsId.push(tipId);\r\n        return newState;\r\n    })\r\n    .case(editGoals, (state, {fields, index}) => {\r\n        const newState = [...state];\r\n\r\n        newState[index] = {\r\n            ...state[index],\r\n            ...fields\r\n        };\r\n        return newState;\r\n    });\r\n","import React from 'react';\r\nimport './EditGoal.scss';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../../../../store/root';\r\nimport { editGoals } from '../../../../store/actions/goals/action';\r\nimport { Goal, GOAL_FIELDS } from '../../../../store/reducers/goals/goalsReducer';\r\nimport { getTip } from '../../../../store/reducers/learn/learnReducer';\r\n\r\ninterface EditGoalProps {\r\n    goalIndex: number;\r\n    onStopEdit(): void;\r\n}\r\n\r\nexport const EditGoal: React.FC<EditGoalProps> = ({ goalIndex, onStopEdit }: EditGoalProps) => {\r\n    const dispatch = useDispatch();\r\n    const goal = useSelector((state: RootState) => state.goals[goalIndex]);\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const form = e.target as HTMLFormElement;\r\n        const elements = Array.from(form.elements) as HTMLInputElement[];\r\n        const fields = elements.reduce((fields, {value, name}) => {\r\n            if (value && GOAL_FIELDS.includes(name as any)) {\r\n                fields[name as 'name'] = value;\r\n            }\r\n            return fields;\r\n        }, {} as Partial<Goal>);\r\n        dispatch(editGoals({\r\n            index: goalIndex,\r\n            fields\r\n        }));\r\n        onStopEdit();\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <button onClick={onStopEdit}>{'<'} Wróć</button>\r\n            <form action=\"\" onSubmit={onSubmit}>\r\n                <input type=\"text\" name=\"name\" defaultValue={goal.name}/>\r\n                <button type=\"submit\">Zapisz</button>\r\n            </form>\r\n            <h2>Przydatne wskazówki:</h2>\r\n            {goal.tipsId.map(tipId => {\r\n                const tip = getTip(tipId);\r\n\r\n                return <div key={tipId}>{tip.title}</div>;\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport { HomePage } from './layouts/HomePage/HomePage';\r\nimport { LearnPage } from './layouts/LearnPage/LearnPage';\r\nimport { WelcomePage } from './layouts/WelcomePage/WelcomePage';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from './store/root';\r\nimport { GoalPage } from './layouts/GoalPage/GoalPage';\r\nimport { AssignTipPage, AssignTipPageProps } from './layouts/AssignTipPage/AssignTipPage';\r\n// import PermissionPage from './layouts/PermissionPage/PermissionPage';\r\n// const PermissionPage = React.lazy(() => import('./layouts/PermissionPage/PermissionPage'));\r\n\r\nexport const PAGE_NAME_TO_COMPONENT = {\r\n    home: HomePage,\r\n    learn: LearnPage,\r\n    welcome: WelcomePage,\r\n    goal: GoalPage,\r\n    assignTip: AssignTipPage\r\n};\r\n\r\nconst App: React.FC = () => {\r\n    // if(Notification.permission !== 'granted'){\r\n    //     return <PermissionPage />;\r\n    // }\r\n    const pageName = useSelector((state:RootState) => state.page.name);\r\n    const pageProps = useSelector((state:RootState) => state.page.props) as AssignTipPageProps;\r\n    const Component = PAGE_NAME_TO_COMPONENT[pageName];\r\n    return (\r\n        <Component {...pageProps}/>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport './HomePage.scss';\r\nimport { usePageRoute } from '../../hooks/usePageRoute';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/root';\r\nimport { useLearnStats } from '../../hooks/useLearnStats';\r\nimport { Quote } from '../../components/Quote/Quote';\r\n\r\nexport const HomePage: React.FC = () => {\r\n    const goToLearn = usePageRoute('learn');\r\n    const goToGoal = usePageRoute('goal');\r\n    const countGoal = useSelector((state: RootState) => state.goals.length);\r\n    const {allTipsCount, readTipsCount} = useLearnStats();\r\n    return (\r\n        <div>\r\n            <h1>Scan goals</h1>\r\n            <Quote />\r\n\r\n            <button type=\"button\" onClick={goToGoal}>Zaplanuj cele</button>\r\n            <p>Obecna liczba celów {countGoal}</p>\r\n            <br/>\r\n\r\n            <button type=\"button\" onClick={goToLearn} disabled={readTipsCount === allTipsCount}>Rozwijaj się</button>\r\n            <p>Poznano {readTipsCount}/{allTipsCount}</p>\r\n            <br/>\r\n\r\n            <button type=\"button\">Zmotywuj znajomych</button>\r\n        </div>\r\n\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport './LearnPage.scss';\r\nimport { LearnGroupNames, LEARN_TIP_GROUP } from '../../store/reducers/learn/learnReducer';\r\nimport { NewTip, countReadTips } from './components/NewTip/NewTip';\r\nimport { usePageRoute } from '../../hooks/usePageRoute';\r\nimport { useSelector } from 'react-redux';\r\n\r\nexport const LearnPage: React.FC = () => {\r\n    const goToHome = usePageRoute('home');\r\n    const [page, setPage] = useState<LearnGroupNames|null>(null);\r\n    const mindCount = useSelector(countReadTips('mind'));\r\n    const timeCount = useSelector(countReadTips('time'));\r\n    const fitCount = useSelector(countReadTips('fit'));\r\n    return (\r\n        <div>\r\n            {page === null && <>\r\n                <button onClick={goToHome}>{'<'} Wróć</button>\r\n                <h1>Rozwijaj się</h1>\r\n\r\n                <button type=\"button\" onClick={() => setPage('mind')} disabled={mindCount === LEARN_TIP_GROUP.mind.length}>Wiedza</button>\r\n                <p>Lekcji {mindCount}/{LEARN_TIP_GROUP.mind.length}</p>\r\n                <br/>\r\n\r\n                <button type=\"button\" onClick={() => setPage('time')} disabled={timeCount === LEARN_TIP_GROUP.time.length}>Czas</button>\r\n                <p>Lekcji {timeCount}/{LEARN_TIP_GROUP.time.length}</p>\r\n                <br/>\r\n\r\n                <button type=\"button\" onClick={() => setPage('fit')} disabled={fitCount === LEARN_TIP_GROUP.fit.length}>Zdrowie</button>\r\n                <p>Lekcji {fitCount}/{LEARN_TIP_GROUP.fit.length}</p>\r\n            \r\n            </>}\r\n\r\n            {page !== null && <NewTip groupName={page} onRead={() => {\r\n                setPage(null);\r\n            }} />}\r\n            \r\n        </div>\r\n\r\n    );\r\n};\r\n","import React from 'react';\r\nimport './WelcomePage.scss';\r\nimport { GoalList } from '../../components/GoalList/GoalList';\r\nimport { useGoalCreator } from '../../hooks/useGoalCreator';\r\nimport { usePageRoute } from '../../hooks/usePageRoute';\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store/root';\r\n\r\nexport const WelcomePage: React.FC = () => {\r\n    const countGoal = useSelector((state: RootState) => state.goals.length);\r\n    const createGoal = useGoalCreator();\r\n    const goToHome = usePageRoute('home');\r\n    return (\r\n        <div>\r\n            <h1>Witaj w naszej aplikacji!</h1>\r\n            <p>Na początek wypisz swoje wszystkie cele, plany, marzenia które chciałbyś zrealizować. Będziemy intensywnie nad nimi pracować abyś mógł je spełnić. Pamiętaj marzenia się nie spełniają marzenia się spełnia!</p>\r\n            <button type=\"button\" onClick={createGoal}> Dodaj cel</button>\r\n            <GoalList/>\r\n            <br/>\r\n            <button type=\"button\" onClick={goToHome} disabled={countGoal <= 0}> Zakończ dodawanie </button>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport './GoalPage.scss';\r\nimport { GoalList } from '../../components/GoalList/GoalList';\r\nimport { useGoalCreator } from '../../hooks/useGoalCreator';\r\nimport { usePageRoute } from '../../hooks/usePageRoute';\r\nimport { EditGoal } from './components/EditGoal/EditGoal';\r\n\r\nexport const GoalPage: React.FC = () => {\r\n    const createGoal = useGoalCreator();\r\n    const goToHome = usePageRoute('home');\r\n    const [editIndex, setEditIndex] = useState<number | null>(null);\r\n\r\n    if(editIndex !== null){\r\n        return <EditGoal goalIndex={editIndex} onStopEdit={() => setEditIndex(null)}/>;\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={goToHome}>{'<'} Wróć</button>\r\n            <h1>Twoje cele</h1>\r\n            <p>Kliknij w nazwe celu aby go przeglądać lub edytować.</p>\r\n            <button type=\"button\" onClick={createGoal}>Dodaj cel</button>\r\n            <GoalList onClick={index => setEditIndex(index)}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, { useState } from 'react';\r\nimport './AssignTipPage.scss';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../store/root';\r\nimport { assignTipToGoals } from '../../store/actions/goals/action';\r\nimport { usePageRoute } from '../../hooks/usePageRoute';\r\n\r\nexport interface AssignTipPageProps {\r\n    tipId: string\r\n}\r\n\r\nexport const AssignTipPage: React.FC<AssignTipPageProps> = ({ tipId }: AssignTipPageProps) => {\r\n    const dispatch = useDispatch();\r\n    const goToHome = usePageRoute('home');\r\n    const goalArray = useSelector((state: RootState) => state.goals);\r\n    const [selectedIndex, setSelectedIndex] = useState<number[]>([]);\r\n    const toggleSelectByIndex = (index: number) => {\r\n        if (selectedIndex.includes(index)) {\r\n            setSelectedIndex(selectedIndex.filter((value) => value !== index));\r\n        } else {\r\n            setSelectedIndex([...selectedIndex, index]);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            Do których celów użyjesz zdobytą wiedzę?\r\n            \r\n            {goalArray.map((goal, index) => \r\n                <label key={index} >\r\n                    <input \r\n                        type=\"checkbox\" \r\n                        onChange={() => toggleSelectByIndex(index)} \r\n                        checked={selectedIndex.includes(index)}\r\n                    />\r\n                    {goal.name}\r\n                </label>\r\n            )}\r\n\r\n            <button onClick={() => {\r\n                selectedIndex.forEach((index) => {\r\n                    dispatch(assignTipToGoals({\r\n                        index,\r\n                        tipId\r\n                    }));\r\n                });\r\n                goToHome();\r\n            }}>\r\n                Gotowe\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\r\n\r\nexport interface TipsState {\r\n\r\n}\r\n\r\nexport const tipsReducer = reducerWithInitialState<TipsState>({});\r\n","import { reducerWithInitialState } from 'typescript-fsa-reducers';\r\nimport { PAGE_NAME_TO_COMPONENT } from '../../../App';\r\nimport { goToPage } from '../../actions/page/action';\r\n\r\nexport type PageName = keyof typeof PAGE_NAME_TO_COMPONENT;\r\n\r\nexport interface PageState {\r\n    name: PageName;\r\n    props: {[key: string]: any};\r\n}\r\n\r\nexport const pageReducer = reducerWithInitialState<PageState>({\r\n    name: 'welcome',\r\n    props: {}\r\n})\r\n    .case(goToPage, (state, payload) => payload);\r\n","\r\nimport { combineReducers, createStore, Action } from 'redux';\r\nimport { goalsReducer, GoalsState } from './reducers/goals/goalsReducer';\r\nimport { tipsReducer, TipsState } from './reducers/tips/tipsReducer';\r\nimport { LearnState, learnReducer } from './reducers/learn/learnReducer';\r\nimport { PageState, pageReducer } from './reducers/page/pageReducer';\r\n\r\nexport interface RootState {\r\n    goals: GoalsState,\r\n    tips: TipsState,\r\n    learn: LearnState,\r\n    page: PageState\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    goals: goalsReducer, \r\n    tips: tipsReducer, \r\n    learn: learnReducer,\r\n    page: pageReducer\r\n});\r\n\r\nconst initialState: RootState = JSON.parse(window.localStorage.getItem('state') || '{}') as RootState;\r\n\r\n// @ts-ignore\r\nexport const store = createStore<RootState, Action, unknown, unknown>(rootReducer, initialState, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nstore.subscribe(() => {\r\n    const state = store.getState();\r\n    window.localStorage.setItem('state', JSON.stringify(state));\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {Provider} from 'react-redux';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './store/root';\r\n\r\nReactDOM.render(<Provider store={store}>\r\n    <React.Suspense fallback={null}><App /></React.Suspense></Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}